# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VT_User', [dirname(__file__)])
        except ImportError:
            import _VT_User
            return _VT_User
        if fp is not None:
            try:
                _mod = imp.load_module('_VT_User', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VT_User = swig_import_helper()
    del swig_import_helper
else:
    import _VT_User
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def VT_User_is_trace_on__():
  return _VT_User.VT_User_is_trace_on__()
VT_User_is_trace_on__ = _VT_User.VT_User_is_trace_on__

def VT_User_trace_on__():
  return _VT_User.VT_User_trace_on__()
VT_User_trace_on__ = _VT_User.VT_User_trace_on__

def VT_User_trace_off__():
  return _VT_User.VT_User_trace_off__()
VT_User_trace_off__ = _VT_User.VT_User_trace_off__

def VT_User_buffer_flush__():
  return _VT_User.VT_User_buffer_flush__()
VT_User_buffer_flush__ = _VT_User.VT_User_buffer_flush__

def VT_User_timesync__():
  return _VT_User.VT_User_timesync__()
VT_User_timesync__ = _VT_User.VT_User_timesync__

def VT_User_update_counter__():
  return _VT_User.VT_User_update_counter__()
VT_User_update_counter__ = _VT_User.VT_User_update_counter__

def VT_User_set_rewind_mark__():
  return _VT_User.VT_User_set_rewind_mark__()
VT_User_set_rewind_mark__ = _VT_User.VT_User_set_rewind_mark__

def VT_User_rewind__():
  return _VT_User.VT_User_rewind__()
VT_User_rewind__ = _VT_User.VT_User_rewind__

def VT_User_comment_def__(*args):
  return _VT_User.VT_User_comment_def__(*args)
VT_User_comment_def__ = _VT_User.VT_User_comment_def__

def VT_User_comment__(*args):
  return _VT_User.VT_User_comment__(*args)
VT_User_comment__ = _VT_User.VT_User_comment__
VT_COUNT_DEFGROUP = _VT_User.VT_COUNT_DEFGROUP
VT_COUNT_TYPE_SIGNED = _VT_User.VT_COUNT_TYPE_SIGNED
VT_COUNT_TYPE_UNSIGNED = _VT_User.VT_COUNT_TYPE_UNSIGNED
VT_COUNT_TYPE_FLOAT = _VT_User.VT_COUNT_TYPE_FLOAT
VT_COUNT_TYPE_DOUBLE = _VT_User.VT_COUNT_TYPE_DOUBLE
VT_COUNT_TYPE_INTEGER = _VT_User.VT_COUNT_TYPE_INTEGER
VT_COUNT_TYPE_INTEGER8 = _VT_User.VT_COUNT_TYPE_INTEGER8
VT_COUNT_TYPE_REAL = _VT_User.VT_COUNT_TYPE_REAL

def VT_User_count_group_def__(*args):
  return _VT_User.VT_User_count_group_def__(*args)
VT_User_count_group_def__ = _VT_User.VT_User_count_group_def__

def VT_User_count_def__(*args):
  return _VT_User.VT_User_count_def__(*args)
VT_User_count_def__ = _VT_User.VT_User_count_def__

def VT_User_count_signed_val__(*args):
  return _VT_User.VT_User_count_signed_val__(*args)
VT_User_count_signed_val__ = _VT_User.VT_User_count_signed_val__

def VT_User_count_unsigned_val__(*args):
  return _VT_User.VT_User_count_unsigned_val__(*args)
VT_User_count_unsigned_val__ = _VT_User.VT_User_count_unsigned_val__

def VT_User_count_float_val__(*args):
  return _VT_User.VT_User_count_float_val__(*args)
VT_User_count_float_val__ = _VT_User.VT_User_count_float_val__

def VT_User_count_double_val__(*args):
  return _VT_User.VT_User_count_double_val__(*args)
VT_User_count_double_val__ = _VT_User.VT_User_count_double_val__
VT_MARKER_TYPE_ERROR = _VT_User.VT_MARKER_TYPE_ERROR
VT_MARKER_TYPE_WARNING = _VT_User.VT_MARKER_TYPE_WARNING
VT_MARKER_TYPE_HINT = _VT_User.VT_MARKER_TYPE_HINT

def VT_User_marker_def__(*args):
  return _VT_User.VT_User_marker_def__(*args)
VT_User_marker_def__ = _VT_User.VT_User_marker_def__

def VT_User_marker__(*args):
  return _VT_User.VT_User_marker__(*args)
VT_User_marker__ = _VT_User.VT_User_marker__

def VT_User_start__(*args):
  return _VT_User.VT_User_start__(*args)
VT_User_start__ = _VT_User.VT_User_start__

def VT_User_end__(*args):
  return _VT_User.VT_User_end__(*args)
VT_User_end__ = _VT_User.VT_User_end__


